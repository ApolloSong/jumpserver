# Generated by Django 3.1.6 on 2021-07-06 02:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.contenttypes.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


def add_default_role(apps, schema_editor):
    role_model = apps.get_model('rbac', "Role")
    roles_data = [
        {
            'name': 'System Admin',
            'scope': 'system',
            'builtin': True
        },
        {
            'name': 'Organization Admin',
            'scope': 'org',
            'builtin': True
        },
        {
            'name': 'System Auditor',
            'scope': 'system',
            'builtin': True
        },
        {
            'name': 'Organization Auditor',
            'scope': 'org',
            'builtin': True
        },
        {
            'name': 'User',
            'scope': 'system',
            'builtin': True
        },
        {
            'name': 'Organization User',
            'scope': 'org',
            'builtin': True
        }
    ]
    roles = [role_model(**data) for data in roles_data]
    role_model.objects.bulk_create(roles)


def migrate_users_role_binding(apps, schema_editor):
    user_model = apps.get_model('users', 'User')
    users = user_model.objects.all()
    role_model = apps.get_model('rbac', 'Role')
    roles = role_model.objects.all()
    role_binding_model = apps.get_model('rbac', 'RoleBinding')
    org_member_model = apps.get_model('orgs', 'OrganizationMember')

    # get builtin roles
    roles_map = {}
    for role in roles:
        if role.name == 'System Admin':
            key = 'system_admin'
        elif role.name == 'Organization Admin':
            key = 'org_admin'
        elif role.name == 'System Auditor':
            key = 'system_auditor'
        elif role.name == 'Organization Auditor':
            key = 'org_auditor'
        elif role.name == 'User':
            key = 'system_user'
        elif role.name == 'Organization User':
            key = 'org_user'
        else:
            continue
        roles_map[key] = role

    # migrate users of system scope role
    roles_bindings_data = []
    for user in users:
        if user.role == 'Admin':
            role = roles_map.get('system_admin')
        elif user.role == 'Auditor':
            role = roles_map.get('system_auditor')
        elif user.role == 'User':
            role = roles_map.get('system_user')
        else:
            continue
        obj = role_binding_model(user=user, role=role, scope=role.scope)
        roles_bindings_data.append(obj)

    # migrate users of org scope role
    orgs_members = org_member_model.objects.all()
    for org_member in orgs_members:
        if org_member.role == 'Admin':
            role = roles_map.get('org_admin')
        elif org_member.role == 'Auditor':
            role = roles_map.get('org_auditor')
        elif org_member.role == 'User':
            role = roles_map.get('org_user')
        else:
            continue
        obj = role_binding_model(user=org_member.user, role=role, scope=role.scope, org=org_member.org)
        roles_bindings_data.append(obj)

    role_binding_model.objects.bulk_create(roles_bindings_data)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('orgs', '0010_auto_20210219_1241'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0037_auto_20210701_1400'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExtraPermissionBit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
            options={
                'permissions': [('test_define_extra_permission_bit', 'Test define extra permission bit')],
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='ContentType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contenttypes.contenttype',),
            managers=[
                ('objects', django.contrib.contenttypes.models.ContentTypeManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('scope', models.CharField(choices=[('system', 'System'), ('org', 'Organization')], default='system', max_length=128, verbose_name='Scope')),
                ('builtin', models.BooleanField(default=False, verbose_name='Built-in')),
                ('comment', models.TextField(blank=True, default='', max_length=128, verbose_name='Comment')),
                ('permissions', models.ManyToManyField(blank=True, related_name='roles', to='rbac.Permission', verbose_name='Permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoleBinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('scope', models.CharField(choices=[('system', 'System'), ('org', 'Organization')], default='system', max_length=128, verbose_name='Scope')),
                ('org', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_bindings', to='orgs.organization', verbose_name='Organization')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_bindings', to='rbac.role', verbose_name='Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_bindings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Role binding',
                'unique_together': {('user', 'role', 'org')},
            },
        ),
        migrations.RunPython(add_default_role),
        migrations.RunPython(migrate_users_role_binding)
    ]
